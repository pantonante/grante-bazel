load("@com_github_nelhage_rules_boost//:boost/boost.bzl", "boost_deps")

# glob(["**/*.cpp"])

cc_library(
    name = "grante",
    srcs = [
        "AISInference.cpp",
        "BeliefPropagation.cpp",
        "BruteForceExactInference.cpp",
        "CompositeMinimization.cpp",
        "CompositeMinimizationProblem.cpp",
        "ConditionedFactorType.cpp",
        "Conditioning.cpp",
        "ContrastiveDivergence.cpp",
        "ContrastiveDivergenceTraining.cpp",
        "DiffusionInference.cpp",
        "DisjointSet.cpp",
        "DisjointSetBT.cpp",
        "ExpectationMaximization.cpp",
        "Factor.cpp",
        "FactorConditioningTable.cpp",
        "FactorDataSource.cpp",
        "FactorGraph.cpp",
        "FactorGraphModel.cpp",
        "FactorGraphObservation.cpp",
        "FactorGraphPartialObservation.cpp",
        "FactorGraphStructurizer.cpp",
        "FactorGraphUtility.cpp",
        "FactorType.cpp",
        "FunctionMinimization.cpp",
        "FunctionMinimizationProblem.cpp",
        "GibbsInference.cpp",
        "GibbsSampler.cpp",
        "HyperbolicPrior.cpp",
        "InferenceMethod.cpp",
        "LaplacePrior.cpp",
        "Likelihood.cpp",
        "LinearFactorType.cpp",
        "LinearProgrammingMAPInference.cpp",
        "LogSumExp.cpp",
        "MaximumCompositeLikelihood.cpp",
        "MaximumCrissCrossLikelihood.cpp",
        "MaximumLikelihood.cpp",
        "MaximumPseudolikelihood.cpp",
        "MaximumTreePseudoLikelihood.cpp",
        "MultichainGibbsInference.cpp",
        "NaiveMeanFieldInference.cpp",
        "NaivePiecewiseTraining.cpp",
        "NonlinearRBFFactorType.cpp",
        "NormalPrior.cpp",
        "ParallelTemperingInference.cpp",
        "ParameterEstimationMethod.cpp",
        "Prior.cpp",
        "Pseudolikelihood.cpp",
        "RandomFactorGraphGenerator.cpp",
        "RandomSource.cpp",
        "RBFNetwork.cpp",
        "RBFNetworkRegression.cpp",
        "SAMCInference.cpp",
        "SimulatedAnnealingInference.cpp",
        "StochasticFunctionMinimization.cpp",
        "StochasticFunctionMinimizationProblem.cpp",
        "StructuredHammingLoss.cpp",
        "StructuredLossFunction.cpp",
        "StructuredMeanFieldInference.cpp",
        "StructuredPerceptron.cpp",
        "StructuredSVM.cpp",
        "StudentTPrior.cpp",
        "SubFactorGraph.cpp",
        "SwendsenWangInference.cpp",
        "SwendsenWangSampler.cpp",
        "TestModels.cpp",
        "TreeCoverDecomposition.cpp",
        "TreeInference.cpp",
        "VAcyclicDecomposition.cpp",
    ],
    hdrs = glob(["**/*.h"]),
    visibility = ["//visibility:public"],
    deps = [
        "@boost//:functional",
        "@boost//:lambda",
        "@boost//:math",
        "@boost//:random",
        "@boost//:serialization",
        "@boost//:test",
    ],
    copts = ["-std=c++17"]
)
